
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000348  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001df  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008fa  00000000  00000000  0000082b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010f1c  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ff  00000000  00000000  00012100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000122ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000393f  00000000  00000000  0001233f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	7b d0       	rcall	.+246    	; 0x190 <main>
  9a:	9f c0       	rjmp	.+318    	; 0x1da <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  9e:	08 95       	ret

000000a0 <wait>:
#include <util/delay.h>


void wait(int param1)
{
	for(int i = 0; i< param1;i++)
  a0:	18 16       	cp	r1, r24
  a2:	19 06       	cpc	r1, r25
  a4:	6c f4       	brge	.+26     	; 0xc0 <wait+0x20>
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	e9 ef       	ldi	r30, 0xF9	; 249
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <wait+0xe>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <wait+0x14>
  b4:	00 00       	nop
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	28 17       	cp	r18, r24
  bc:	39 07       	cpc	r19, r25
  be:	a9 f7       	brne	.-22     	; 0xaa <wait+0xa>
  c0:	08 95       	ret

000000c2 <setPattern1>:

		_delay_ms(1);
	}
}
void setPattern1(int toSaveTo[])
{
  c2:	fc 01       	movw	r30, r24
	for(int i = 0; i< 8; i++)
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	30 e0       	ldi	r19, 0x00	; 0
	{
		toSaveTo[i] = 0x01<<i;
  c8:	41 e0       	ldi	r20, 0x01	; 1
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	ca 01       	movw	r24, r20
  ce:	02 2e       	mov	r0, r18
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <setPattern1+0x14>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <setPattern1+0x10>
  da:	81 93       	st	Z+, r24
  dc:	91 93       	st	Z+, r25
		_delay_ms(1);
	}
}
void setPattern1(int toSaveTo[])
{
	for(int i = 0; i< 8; i++)
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	28 30       	cpi	r18, 0x08	; 8
  e4:	31 05       	cpc	r19, r1
  e6:	91 f7       	brne	.-28     	; 0xcc <setPattern1+0xa>
	{
		toSaveTo[i] = 0x01<<i;
	}

}
  e8:	08 95       	ret

000000ea <setStates>:
void setStates(int state[])
{
  ea:	fc 01       	movw	r30, r24
	int i;
	for(i = 0; i<8 ;i++)
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
	{
		state[i] = 0x01<<i;
  f0:	41 e0       	ldi	r20, 0x01	; 1
  f2:	50 e0       	ldi	r21, 0x00	; 0
  f4:	ca 01       	movw	r24, r20
  f6:	02 2e       	mov	r0, r18
  f8:	02 c0       	rjmp	.+4      	; 0xfe <setStates+0x14>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <setStates+0x10>
 102:	81 93       	st	Z+, r24
 104:	91 93       	st	Z+, r25

}
void setStates(int state[])
{
	int i;
	for(i = 0; i<8 ;i++)
 106:	2f 5f       	subi	r18, 0xFF	; 255
 108:	3f 4f       	sbci	r19, 0xFF	; 255
 10a:	28 30       	cpi	r18, 0x08	; 8
 10c:	31 05       	cpc	r19, r1
 10e:	91 f7       	brne	.-28     	; 0xf4 <setStates+0xa>
	{
		state[i] = 0x01<<i;
	}
}
 110:	08 95       	ret

00000112 <handleState>:

void handleState(int state[])
{
 112:	df 92       	push	r13
 114:	ef 92       	push	r14
 116:	ff 92       	push	r15
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	8c 01       	movw	r16, r24
	int i;
	//int k = strlen(state);
	for(i=0; i< 8; i++)
 122:	c0 e0       	ldi	r28, 0x00	; 0
 124:	d0 e0       	ldi	r29, 0x00	; 0
			{
				case 0:
				PORTD = 127;
				break;
				case 1:
				PORTD = 255;
 126:	dd 24       	eor	r13, r13
 128:	da 94       	dec	r13
				break;
				case 2:
				PORTC = 1;
 12a:	ee 24       	eor	r14, r14
 12c:	e3 94       	inc	r14
		if(state[i] = PINA)
		{
			switch(i)
			{
				case 0:
				PORTD = 127;
 12e:	0f 2e       	mov	r0, r31
 130:	ff e7       	ldi	r31, 0x7F	; 127
 132:	ff 2e       	mov	r15, r31
 134:	f0 2d       	mov	r31, r0
{
	int i;
	//int k = strlen(state);
	for(i=0; i< 8; i++)
	{
		if(state[i] = PINA)
 136:	29 b3       	in	r18, 0x19	; 25
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	f8 01       	movw	r30, r16
 13c:	21 93       	st	Z+, r18
 13e:	31 93       	st	Z+, r19
 140:	8f 01       	movw	r16, r30
 142:	23 2b       	or	r18, r19
 144:	c9 f0       	breq	.+50     	; 0x178 <handleState+0x66>
		{
			switch(i)
 146:	c1 30       	cpi	r28, 0x01	; 1
 148:	d1 05       	cpc	r29, r1
 14a:	69 f0       	breq	.+26     	; 0x166 <handleState+0x54>
 14c:	1c f4       	brge	.+6      	; 0x154 <handleState+0x42>
 14e:	20 97       	sbiw	r28, 0x00	; 0
 150:	41 f0       	breq	.+16     	; 0x162 <handleState+0x50>
 152:	0f c0       	rjmp	.+30     	; 0x172 <handleState+0x60>
 154:	c2 30       	cpi	r28, 0x02	; 2
 156:	d1 05       	cpc	r29, r1
 158:	41 f0       	breq	.+16     	; 0x16a <handleState+0x58>
 15a:	c3 30       	cpi	r28, 0x03	; 3
 15c:	d1 05       	cpc	r29, r1
 15e:	39 f0       	breq	.+14     	; 0x16e <handleState+0x5c>
 160:	08 c0       	rjmp	.+16     	; 0x172 <handleState+0x60>
			{
				case 0:
				PORTD = 127;
 162:	f2 ba       	out	0x12, r15	; 18
				break;
 164:	06 c0       	rjmp	.+12     	; 0x172 <handleState+0x60>
				case 1:
				PORTD = 255;
 166:	d2 ba       	out	0x12, r13	; 18
				break;
 168:	04 c0       	rjmp	.+8      	; 0x172 <handleState+0x60>
				case 2:
				PORTC = 1;
 16a:	e5 ba       	out	0x15, r14	; 21
				break;
 16c:	02 c0       	rjmp	.+4      	; 0x172 <handleState+0x60>
				case 3:
				PORTD = 0;
 16e:	12 ba       	out	0x12, r1	; 18
				PORTC = 0;
 170:	15 ba       	out	0x15, r1	; 21
				case 4:
				break;
				default:
				break;
			}
			wait(1000);
 172:	88 ee       	ldi	r24, 0xE8	; 232
 174:	93 e0       	ldi	r25, 0x03	; 3
 176:	94 df       	rcall	.-216    	; 0xa0 <wait>

void handleState(int state[])
{
	int i;
	//int k = strlen(state);
	for(i=0; i< 8; i++)
 178:	21 96       	adiw	r28, 0x01	; 1
 17a:	c8 30       	cpi	r28, 0x08	; 8
 17c:	d1 05       	cpc	r29, r1
 17e:	d9 f6       	brne	.-74     	; 0x136 <handleState+0x24>
			}
			wait(1000);
		}
	}

}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	ff 90       	pop	r15
 18a:	ef 90       	pop	r14
 18c:	df 90       	pop	r13
 18e:	08 95       	ret

00000190 <main>:


int main (void)
{
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	cd b7       	in	r28, 0x3d	; 61
 196:	de b7       	in	r29, 0x3e	; 62
 198:	a0 97       	sbiw	r28, 0x20	; 32
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	f8 94       	cli
 19e:	de bf       	out	0x3e, r29	; 62
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	cd bf       	out	0x3d, r28	; 61
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
 1a4:	7c df       	rcall	.-264    	; 0x9e <board_init>
// 		}
// 
// 	}
// 	return 1;

	DDRD = 0b11111111;
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b11111111;
 1aa:	84 bb       	out	0x14, r24	; 20
	DDRB = 0b11111111;
 1ac:	87 bb       	out	0x17, r24	; 23
	int states[8] = {};
 1ae:	20 e1       	ldi	r18, 0x10	; 16
 1b0:	8e 01       	movw	r16, r28
 1b2:	0f 5f       	subi	r16, 0xFF	; 255
 1b4:	1f 4f       	sbci	r17, 0xFF	; 255
 1b6:	f8 01       	movw	r30, r16
 1b8:	82 2f       	mov	r24, r18
 1ba:	11 92       	st	Z+, r1
 1bc:	8a 95       	dec	r24
 1be:	e9 f7       	brne	.-6      	; 0x1ba <main+0x2a>
	int pattern[8] = {};
 1c0:	ce 01       	movw	r24, r28
 1c2:	41 96       	adiw	r24, 0x11	; 17
 1c4:	fc 01       	movw	r30, r24
 1c6:	11 92       	st	Z+, r1
 1c8:	2a 95       	dec	r18
 1ca:	e9 f7       	brne	.-6      	; 0x1c6 <main+0x36>
	setPattern1(pattern);
 1cc:	7a df       	rcall	.-268    	; 0xc2 <setPattern1>
	setStates(states);
 1ce:	c8 01       	movw	r24, r16
 1d0:	8c df       	rcall	.-232    	; 0xea <setStates>
	//}

	while(true)
	{

		handleState(states);
 1d2:	ce 01       	movw	r24, r28
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	9d df       	rcall	.-198    	; 0x112 <handleState>
	}
 1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <main+0x42>

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
