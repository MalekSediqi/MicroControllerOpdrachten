
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .data         00000000  00800100  00800100  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000214  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000017d  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007f5  00000000  00000000  00000581  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00000d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010f2b  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006a  00000000  00000000  00011cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00011d65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000393f  00000000  00000000  00011d8d  2**0
=======
  0 .data         00000000  00800100  00800100  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000307  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d4  00000000  00000000  00000573  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000087b  00000000  00000000  00000747  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00000fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010ef9  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000126  00000000  00000000  00011f35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0001205b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000393f  00000000  00000000  0001208b  2**0
>>>>>>> 7decbc749f04913b5a21860007eb5547d1f30548
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
<<<<<<< HEAD
  98:	14 d0       	rcall	.+40     	; 0xc2 <main>
  9a:	21 c0       	rjmp	.+66     	; 0xde <_exit>
=======
  98:	28 d0       	rcall	.+80     	; 0xea <main>
  9a:	5c c0       	rjmp	.+184    	; 0x154 <_exit>
>>>>>>> 7decbc749f04913b5a21860007eb5547d1f30548

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <board_init>:
  9e:	08 95       	ret

000000a0 <wait>:
#include <util/delay.h>


void wait(int param1)
{
	for(int i = 0; i< param1;i++)
  a0:	18 16       	cp	r1, r24
  a2:	19 06       	cpc	r1, r25
  a4:	6c f4       	brge	.+26     	; 0xc0 <wait+0x20>
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	e9 ef       	ldi	r30, 0xF9	; 249
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <wait+0xe>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <wait+0x14>
  b4:	00 00       	nop
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	28 17       	cp	r18, r24
  bc:	39 07       	cpc	r19, r25
  be:	a9 f7       	brne	.-22     	; 0xaa <wait+0xa>
  c0:	08 95       	ret

<<<<<<< HEAD
000000c2 <main>:
// b3
=======
000000c2 <setPattern1>:

	_delay_ms(1);
	}
}
void setPattern1(int toSaveTo[])
{
  c2:	fc 01       	movw	r30, r24
	for(int i = 0; i< 8; i++)
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	30 e0       	ldi	r19, 0x00	; 0
	{
		toSaveTo[i] = 0x01<<i;
  c8:	41 e0       	ldi	r20, 0x01	; 1
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	ca 01       	movw	r24, r20
  ce:	02 2e       	mov	r0, r18
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <setPattern1+0x14>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <setPattern1+0x10>
  da:	81 93       	st	Z+, r24
  dc:	91 93       	st	Z+, r25
	_delay_ms(1);
	}
}
void setPattern1(int toSaveTo[])
{
	for(int i = 0; i< 8; i++)
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	28 30       	cpi	r18, 0x08	; 8
  e4:	31 05       	cpc	r19, r1
  e6:	91 f7       	brne	.-28     	; 0xcc <setPattern1+0xa>
	{
		toSaveTo[i] = 0x01<<i;
	}

}
  e8:	08 95       	ret

000000ea <main>:

>>>>>>> 7decbc749f04913b5a21860007eb5547d1f30548
int main (void)
{
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
  f2:	60 97       	sbiw	r28, 0x10	; 16
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	f8 94       	cli
  f8:	de bf       	out	0x3e, r29	; 62
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	cd bf       	out	0x3d, r28	; 61
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
<<<<<<< HEAD
  c2:	ed df       	rcall	.-38     	; 0x9e <board_init>
	DDRD = 0b01111111;
  c4:	8f e7       	ldi	r24, 0x7F	; 127
  c6:	81 bb       	out	0x11, r24	; 17
	
	while(true)
	{
		PINC = 0b01000000;
  c8:	c0 e4       	ldi	r28, 0x40	; 64
  ca:	c3 bb       	out	0x13, r28	; 19
		if(PINC0 == 0)
		{
			PORTD = 0b01000000;
  cc:	c2 bb       	out	0x12, r28	; 18
			wait(500);
  ce:	84 ef       	ldi	r24, 0xF4	; 244
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	e6 df       	rcall	.-52     	; 0xa0 <wait>
			PORTD = 0b00000000;
  d4:	12 ba       	out	0x12, r1	; 18
			wait(500);
  d6:	84 ef       	ldi	r24, 0xF4	; 244
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	e2 df       	rcall	.-60     	; 0xa0 <wait>
  dc:	f6 cf       	rjmp	.-20     	; 0xca <main+0x8>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
=======
  fe:	cf df       	rcall	.-98     	; 0x9e <board_init>
	DDRD = 0b11111111;
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	81 bb       	out	0x11, r24	; 17
	DDRB = 0b11111111;
 104:	87 bb       	out	0x17, r24	; 23
	int pattern[8] = {};
 106:	ce 01       	movw	r24, r28
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	20 e1       	ldi	r18, 0x10	; 16
 10c:	fc 01       	movw	r30, r24
 10e:	11 92       	st	Z+, r1
 110:	2a 95       	dec	r18
 112:	e9 f7       	brne	.-6      	; 0x10e <main+0x24>
	setPattern1(pattern);
 114:	d6 df       	rcall	.-84     	; 0xc2 <setPattern1>
	int counter = 0;
	bool toggled = false;
 116:	10 e0       	ldi	r17, 0x00	; 0
		//}
		//wait(500);

		if(PINC >= 1)
		{
			toggled = !toggled;
 118:	ff 24       	eor	r15, r15
 11a:	f3 94       	inc	r15
			wait(250);

		}
		else
		{
			PORTD = 64;
 11c:	00 e4       	ldi	r16, 0x40	; 64
			//counter = 0;
//
		//}
		//wait(500);

		if(PINC >= 1)
 11e:	83 b3       	in	r24, 0x13	; 19
 120:	88 23       	and	r24, r24
 122:	21 f0       	breq	.+8      	; 0x12c <main+0x42>
		{
			toggled = !toggled;
 124:	1f 25       	eor	r17, r15
			wait(1000);
 126:	88 ee       	ldi	r24, 0xE8	; 232
 128:	93 e0       	ldi	r25, 0x03	; 3
 12a:	ba df       	rcall	.-140    	; 0xa0 <wait>
			
		}

		if(toggled)
 12c:	11 23       	and	r17, r17
 12e:	49 f0       	breq	.+18     	; 0x142 <main+0x58>
		{
			PORTD = 64;
 130:	02 bb       	out	0x12, r16	; 18
			wait(250);
 132:	8a ef       	ldi	r24, 0xFA	; 250
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	b4 df       	rcall	.-152    	; 0xa0 <wait>
			PORTD = 0;
 138:	12 ba       	out	0x12, r1	; 18
			wait(250);
 13a:	8a ef       	ldi	r24, 0xFA	; 250
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	b0 df       	rcall	.-160    	; 0xa0 <wait>
 140:	ee cf       	rjmp	.-36     	; 0x11e <main+0x34>

		}
		else
		{
			PORTD = 64;
 142:	02 bb       	out	0x12, r16	; 18
			wait(1000);
 144:	88 ee       	ldi	r24, 0xE8	; 232
 146:	93 e0       	ldi	r25, 0x03	; 3
 148:	ab df       	rcall	.-170    	; 0xa0 <wait>
			PORTD = 0;
 14a:	12 ba       	out	0x12, r1	; 18
			wait(1000);
 14c:	88 ee       	ldi	r24, 0xE8	; 232
 14e:	93 e0       	ldi	r25, 0x03	; 3
 150:	a7 df       	rcall	.-178    	; 0xa0 <wait>
 152:	e5 cf       	rjmp	.-54     	; 0x11e <main+0x34>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
>>>>>>> 7decbc749f04913b5a21860007eb5547d1f30548
